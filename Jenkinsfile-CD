@Library('Shared-lib') _
pipeline{
    agent any 

    parameters{
        string(name: 'BACKEND_DOCKERTAG', defaultValue: 'latest', description: 'Tag for the backend Docker image')
    }

    environment {
        GITHUB_TOKEN = credentials('github-token')
        APP_NAME = "ecommerce-microservices"
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
    }
    
    stages{
        stage("Validate Parameters"){
            steps{
                script {
                    if(params.BACKEND_DOCKERTAG == ''){
                        error("Docker image tag must be provided.")
                    }
                    echo "üöÄ Deploying version: ${params.BACKEND_DOCKERTAG}"
                }
            }
        }

        stage("Git: Code Checkout"){
            steps{
                script {
                    code_checkout("https://github.com/RoshanTiwari07/nodejs-ecommerce-microservice-deployment.git", "main")
                }
            }
        }

        stage("Update K8s Manifests"){
            steps{
                script {
                    sh """
                        # Update all microservice images
                        sed -i 's|image: roshan03ish/auth:.*|image: roshan03ish/auth:${params.BACKEND_DOCKERTAG}|g' k8s/auth/deployment.yml
                        sed -i 's|image: roshan03ish/product:.*|image: roshan03ish/product:${params.BACKEND_DOCKERTAG}|g' k8s/product/deployment.yml
                        sed -i 's|image: roshan03ish/order:.*|image: roshan03ish/order:${params.BACKEND_DOCKERTAG}|g' k8s/order/deployment.yml
                        sed -i 's|image: roshan03ish/api-gateway:.*|image: roshan03ish/api-gateway:${params.BACKEND_DOCKERTAG}|g' k8s/api-gateway/deployment.yml
                        
                        echo "‚úÖ Updated manifests:"
                        grep -r "image: roshan03ish" k8s/ || true
                    """
                }
            }
        }

        stage("Commit & Push Changes"){
            steps{
                script {
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config user.name "Jenkins CD"
                            git config user.email "jenkins@ecommerce.com"
                            
                            # Check if there are changes
                            if git diff --quiet; then
                                echo "‚ÑπÔ∏è No changes to commit"
                            else
                                git add k8s/
                                git commit -m "üöÄ Deploy ${params.BACKEND_DOCKERTAG} - Updated all microservice images"
                                git push https://\${GITHUB_TOKEN}@github.com/RoshanTiwari07/nodejs-ecommerce-microservice-deployment.git main
                                echo "‚úÖ Changes pushed to Git"
                            fi
                        """
                    }
                }
            }
        }

        stage("Prepare Kind Cluster"){
            steps{
                script {
                    dir('k8s') {
                        sh """
                            echo "üîß Ensuring Kind cluster is ready..."
                            chmod +x kind-cluster.sh
                            
                            # Check if Kind cluster exists, create if not
                            if ! kind get clusters | grep -q "ecommerce"; then
                                echo "üì¶ Creating Kind cluster..."
                                ./kind-cluster.sh create
                            else
                                echo "‚úÖ Kind cluster already exists"
                                ./kind-cluster.sh status
                            fi
                            
                            # Load latest images into Kind
                            echo "üì• Loading Docker images into Kind..."
                            ./kind-cluster.sh load-images
                        """
                    }
                }
            }
        }

        stage("Deploy with Kind Kubernetes"){
            steps{
                script {
                    dir('k8s') {
                        // Make scripts executable and run deployment
                        sh """
                            echo "üöÄ Running Kind deployment - One-click deployment!"
                            chmod +x *.sh
                            ./deploy.sh
                        """
                    }
                }
            }
        }

        stage("Post-Deployment Verification"){
            steps{
                script {
                    sh """
                        echo "üîç Verifying deployment..."
                        
                        # Wait for pods to be ready
                        echo "‚è≥ Waiting for pods to be ready..."
                        kubectl wait --for=condition=ready pod -l app=auth -n ecommerce --timeout=120s || true
                        kubectl wait --for=condition=ready pod -l app=product -n ecommerce --timeout=120s || true
                        kubectl wait --for=condition=ready pod -l app=order -n ecommerce --timeout=120s || true
                        kubectl wait --for=condition=ready pod -l app=api-gateway -n ecommerce --timeout=120s || true
                        
                        # Show deployment status
                        echo "üìä Final deployment status:"
                        kubectl get pods -n ecommerce -o wide
                        kubectl get services -n ecommerce
                        
                        # Test health endpoints
                        echo "üè• Health check tests:"
                        kubectl port-forward svc/api-gateway 8080:3003 -n ecommerce &
                        sleep 10
                        curl -f http://localhost:8080/health || echo "‚ö†Ô∏è Health check failed"
                        pkill -f "kubectl port-forward" || true
                    """
                }
            }
        }

        stage("Deployment Complete"){
            steps{
                script {
                    sh """
                        echo "üéâ Kubernetes deployment completed successfully!"
                        echo "‚úÖ All microservices deployed to Kind cluster"
                        echo "üìä Final status:"
                        kubectl get all -n ecommerce || true
                        echo ""
                        echo "üåê Access your services:"
                        echo "   kubectl port-forward svc/api-gateway 3003:3003 -n ecommerce"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Kind Kubernetes deployment successful for version ${params.BACKEND_DOCKERTAG}!"
        }
        
        failure {
            echo "‚ùå Kind Kubernetes deployment failed!"
        }
    }
}