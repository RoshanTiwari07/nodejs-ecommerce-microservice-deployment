@Library('Shared-lib') _
pipeline{
    agent any 

    parameters{
        string(name: 'BACKEND_DOCKERTAG', defaultValue: 'latest', description: 'Tag for the backend Docker image')
    }

    environment {
        APP_NAME = "ecommerce-microservices"
        PATH = "/var/jenkins_home/bin:${env.PATH}"
    }
    
    stages{
        stage("Validate Parameters"){
            steps{
                script {
                    if(params.BACKEND_DOCKERTAG == ''){
                        error("Docker image tag must be provided.")
                    }
                    echo "🚀 Deploying version: ${params.BACKEND_DOCKERTAG}"
                }
            }
        }

        stage("Git: Code Checkout"){
            steps{
                script {
                    code_checkout("https://github.com/RoshanTiwari07/nodejs-ecommerce-microservice-deployment.git", "main")
                }
            }
        }

        stage("Update K8s Manifests"){
            steps{
                script {
                    sh """
                        # Update all microservice images
                        sed -i 's|image: roshan03ish/auth:.*|image: roshan03ish/auth:${params.BACKEND_DOCKERTAG}|g' k8s/auth/deployment.yml
                        sed -i 's|image: roshan03ish/product:.*|image: roshan03ish/product:${params.BACKEND_DOCKERTAG}|g' k8s/product/deployment.yml
                        sed -i 's|image: roshan03ish/order:.*|image: roshan03ish/order:${params.BACKEND_DOCKERTAG}|g' k8s/order/deployment.yml
                        sed -i 's|image: roshan03ish/api-gateway:.*|image: roshan03ish/api-gateway:${params.BACKEND_DOCKERTAG}|g' k8s/api-gateway/deployment.yml
                        
                        echo "✅ Updated manifests:"
                        grep -r "image: roshan03ish" k8s/ || true
                    """
                }
            }
        }

        stage("Commit & Push Changes"){
            steps{
                script {
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            # Configure git
                            git config user.name "Jenkins CD"
                            git config user.email "jenkins@ecommerce.com"
                            
                            # Check if there are changes
                            if git diff --quiet; then
                                echo "ℹ️ No changes to commit"
                            else
                                echo "📝 Committing manifest changes..."
                                git add k8s/
                                git commit -m "🚀 Deploy ${params.BACKEND_DOCKERTAG} - Updated all microservice images"
                                
                                echo "� Pushing changes to GitHub..."
                                # Use proper token authentication format
                                git push https://\${GITHUB_TOKEN}@github.com/RoshanTiwari07/nodejs-ecommerce-microservice-deployment.git HEAD:main
                                echo "✅ Changes pushed to Git successfully"
                            fi
                        """
                    }
                }
            }
        }

        stage("Install Required Tools"){
            steps{
                script {
                    sh """
                        echo "� Installing Kind and kubectl in Jenkins container..."
                        
                        # Install Kind if not present
                        if ! command -v kind &> /dev/null; then
                            echo "📦 Installing Kind..."
                            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
                            chmod +x ./kind
                            # Try system install, fallback to workspace
                            if mv ./kind /usr/local/bin/kind 2>/dev/null; then
                                echo "✅ Kind installed to system path"
                            else
                                echo "⚠️ Installing to workspace - adding to PATH"
                                export PATH=\$PWD:\$PATH
                            fi
                        else
                            echo "✅ Kind already available"
                        fi
                        
                        # Install kubectl if not present  
                        if ! command -v kubectl &> /dev/null; then
                            echo "� Installing kubectl..."
                            curl -LO "https://dl.k8s.io/release/\$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            # Try system install, fallback to workspace
                            if mv kubectl /usr/local/bin/kubectl 2>/dev/null; then
                                echo "✅ kubectl installed to system path"
                            else
                                echo "⚠️ Installing to workspace - adding to PATH"
                                export PATH=\$PWD:\$PATH
                            fi
                        else
                            echo "✅ kubectl already available"
                        fi
                        
                        # Verify installations
                        echo "🔍 Verifying installations..."
                        kind version
                        kubectl version --client
                        docker --version
                        
                        echo "✅ All tools ready!"
                    """
                }
            }
        }

        stage("Prepare Kind Cluster"){
            steps{
                script {
                    dir('k8s') {
                        sh """
                            echo "🔧 Ensuring Kind cluster is ready..."
                            export PATH="/var/jenkins_home/bin:\$PATH"
                            chmod +x kind-cluster.sh
                            
                            # Clean up any existing clusters and create fresh
                            echo "�️ Cleaning up existing clusters..."
                            /var/jenkins_home/bin/kind delete cluster --name=ecommerce 2>/dev/null || echo "No existing cluster to delete"
                            
                            echo "📦 Creating fresh Kind cluster..."
                            PATH="/var/jenkins_home/bin:\$PATH" ./kind-cluster.sh create
                            
                            # Load latest images into Kind
                            echo "📥 Loading Docker images into Kind..."
                            PATH="/var/jenkins_home/bin:\$PATH" ./kind-cluster.sh load-images
                        """
                    }
                }
            }
        }

        stage("Deploy with Kind Kubernetes"){
            steps{
                script {
                    dir('k8s') {
                        // Make scripts executable and run deployment
                        sh """
                            echo "🚀 Running Kind deployment - One-click deployment!"
                            export PATH="/var/jenkins_home/bin:\$PATH"
                            chmod +x *.sh
                            PATH="/var/jenkins_home/bin:\$PATH" ./deploy.sh
                        """
                    }
                }
            }
        }

        stage("Post-Deployment Verification"){
            steps{
                script {
                    sh """
                        echo "🔍 Verifying deployment..."
                        
                        # Wait for pods to be ready
                        echo "⏳ Waiting for pods to be ready..."
                        kubectl wait --for=condition=ready pod -l app=auth -n ecommerce --timeout=120s || true
                        kubectl wait --for=condition=ready pod -l app=product -n ecommerce --timeout=120s || true
                        kubectl wait --for=condition=ready pod -l app=order -n ecommerce --timeout=120s || true
                        kubectl wait --for=condition=ready pod -l app=api-gateway -n ecommerce --timeout=120s || true
                        
                        # Show deployment status
                        echo "📊 Final deployment status:"
                        kubectl get pods -n ecommerce -o wide
                        kubectl get services -n ecommerce
                        
                        # Test health endpoints
                        echo "🏥 Health check tests:"
                        kubectl port-forward svc/api-gateway 8080:3003 -n ecommerce &
                        sleep 10
                        curl -f http://localhost:8080/health || echo "⚠️ Health check failed"
                        pkill -f "kubectl port-forward" || true
                    """
                }
            }
        }

        stage("Deployment Complete"){
            steps{
                script {
                    sh """
                        echo "🎉 Kubernetes deployment completed successfully!"
                        echo "✅ All microservices deployed to Kind cluster"
                        echo "📊 Final status:"
                        kubectl get all -n ecommerce || true
                        echo ""
                        echo "🌐 Access your services:"
                        echo "   kubectl port-forward svc/api-gateway 3003:3003 -n ecommerce"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "🎉 Kind Kubernetes deployment successful for version ${params.BACKEND_DOCKERTAG}!"
        }
        
        failure {
            echo "❌ Kind Kubernetes deployment failed!"
        }
    }
}