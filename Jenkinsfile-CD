@Library('Shared-Lib') _
// Minimal CD pipeline: assumes images already built & pushed by CI.
// Goals: install kind/kubectl if missing (in Jenkins container), create ephemeral cluster, deploy manifests, wait for readiness.
pipeline {
  agent any

  parameters {
    string(name: 'BACKEND_DOCKERTAG', defaultValue: 'latest', description: 'Tag shared by all service images (auth/product/order/api-gateway)')
  }

  environment {
    CLUSTER_NAME = 'ecommerce'
    NAMESPACE = 'ecommerce'
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          code_checkout('https://github.com/RoshanTiwari07/nodejs-ecommerce-microservice-deployment.git', 'main')
        }
      }
    }

    stage('Validate Input') {
      steps {
        script {
          if(!params.BACKEND_DOCKERTAG?.trim()) {
            error 'BACKEND_DOCKERTAG must not be empty'
          }
          echo "Deploying tag: ${params.BACKEND_DOCKERTAG}"
        }
      }
    }

    stage('Verify Tools') {
      steps {
        sh '''
          echo "[INFO] Verifying required tools..."
          
          echo "‚úÖ kind version: $(kind version)"
          echo "‚úÖ kubectl version: $(kubectl version --client )"
          echo "‚úÖ docker version: $(docker --version)"
          
          echo "[INFO] All tools verified and ready!"
        '''
      }
    }

    stage('Create Multi-Node Kind Cluster') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Cleaning up any existing cluster..."
          kind delete cluster --name="$CLUSTER_NAME" 2>/dev/null || echo "No existing cluster to delete"
          
          echo "[INFO] Creating multi-node Kind cluster (1 control-plane + 2 workers)..."
          kind create cluster --config=k8s/kind-config.yaml --wait=120s
          
          echo "‚úÖ Multi-node cluster created successfully!"
          echo "üìä Cluster nodes:"
          kubectl get nodes -o wide --show-labels
          
          echo "üîß Setting up Nginx Ingress Controller for load balancing..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          
          echo "‚è≥ Waiting for Ingress Controller to be ready..."
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s
          
          echo "‚úÖ Nginx Ingress Controller deployed successfully!"
          echo "üåê Ingress will be accessible via:"
          echo "   - HTTP: http://localhost (port 80)"
          echo "   - HTTPS: https://localhost (port 443)"
          echo "   - Host: ecommerce.local (add to /etc/hosts or use localhost)"
        '''
      }
    }


    stage('Patch Image Tags in Manifests') {
      steps {
        sh '''
          set -e
          echo "[INFO] Updating deployment image tags to :${BACKEND_DOCKERTAG}"
          
          # Replace placeholder with actual tag in all deployment files
          find k8s -name "deployment.yml" -exec sed -i "s|{{IMAGE_TAG}}|${BACKEND_DOCKERTAG}|g" {} \\;
          
          echo "[INFO] Updated image tags:"
          grep -R "image: roshan03ish" k8s || true
        '''
      }
    }

    stage('Apply Kubernetes Manifests') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Creating namespace..."
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create namespace "$NAMESPACE"
          echo "‚úÖ Namespace $NAMESPACE ready"

          echo "[INFO] Applying manifests..."
          kubectl apply -n "$NAMESPACE" -f k8s/db
          kubectl apply -n "$NAMESPACE" -f k8s/auth
          kubectl apply -n "$NAMESPACE" -f k8s/product
          kubectl apply -n "$NAMESPACE" -f k8s/order
          kubectl apply -n "$NAMESPACE" -f k8s/api-gateway
          
          echo "[INFO] Applying ingress for load balancing..."
          kubectl apply -f k8s/ingress.yml
          
          echo "‚úÖ All manifests and ingress applied"
        '''
      }
    }

    stage('Wait for Pods') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Waiting for deployments..."
          for app in auth product order api-gateway; do
            echo "‚è≥ Waiting for $app..."
            kubectl rollout status deployment/$app -n "$NAMESPACE" --timeout=120s
          done
          
          echo "‚úÖ All deployments ready"
          kubectl get pods -n "$NAMESPACE" -o wide
        '''
      }
    }

    stage('Ingress & Service Check') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Checking services and ingress..."
          kubectl get svc -n "$NAMESPACE"
          kubectl get ingress -n "$NAMESPACE"
          
          echo "[INFO] Waiting for ingress to get external IP..."
          sleep 10
          
          echo "[INFO] Testing ingress load balancer..."
          # Test via localhost (Kind maps port 80 to ingress)
          if curl -fsS --max-time 10 -H "Host: ecommerce.local" http://localhost/health >/dev/null 2>&1; then
            echo "‚úÖ Ingress health check passed!"
            echo "üåê Access your application:"
            echo "   curl -H \"Host: ecommerce.local\" http://localhost/health"
            echo "   curl -H \"Host: ecommerce.local\" http://localhost/auth"
            echo "   curl -H \"Host: ecommerce.local\" http://localhost/products"
          else
            echo "‚ö†Ô∏è Ingress not ready yet, testing direct service..."
            kubectl port-forward -n "$NAMESPACE" svc/api-gateway 8080:3003 >/dev/null 2>&1 &
            PF_PID=$!
            sleep 5
            
            if curl -fsS --max-time 5 http://127.0.0.1:8080/health >/dev/null 2>&1; then
              echo "‚úÖ Direct service health check passed"
            else
              echo "‚ö†Ô∏è Service health check failed"
            fi
            
            kill $PF_PID 2>/dev/null || true
          fi
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ CD pipeline completed successfully for tag ${params.BACKEND_DOCKERTAG}."
    }
    failure {
      echo "‚ùå CD pipeline failed for tag ${params.BACKEND_DOCKERTAG}." 
      script {
        sh '''
          set +e
          echo "[FAILURE] Gathering diagnostics..."
          kubectl get all -n "$NAMESPACE" || true
          kubectl describe pods -n "$NAMESPACE" || true
          kubectl get events -n "$NAMESPACE" --sort-by=.lastTimestamp | tail -n 20 || true

          echo "[CLEANUP] Cleaning up resources..."
          kubectl delete namespace "$NAMESPACE" --wait=false || true
          kind delete cluster --name "$CLUSTER_NAME" || true
          echo "‚úÖ Cleanup completed"
        '''
      }
    }
    always {
      echo 'üèÅ Pipeline finished.'
    }
  }
}