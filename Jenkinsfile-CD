@Library('Shared-Lib') _
// Minimal CD pipeline: assumes images already built & pushed by CI.
// Goals: install kind/kubectl if missing (in Jenkins container), create ephemeral cluster, deploy manifests, wait for readiness.
pipeline {
  agent any

  parameters {
    string(name: 'BACKEND_DOCKERTAG', defaultValue: 'latest', description: 'Tag shared by all service images (auth/product/order/api-gateway)')
  }

  environment {
    CLUSTER_NAME = 'ecommerce'
    NAMESPACE = 'ecommerce'
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          code_checkout('https://github.com/RoshanTiwari07/nodejs-ecommerce-microservice-deployment.git', 'main')
        }
      }
    }

    stage('Validate Input') {
      steps {
        script {
          if(!params.BACKEND_DOCKERTAG?.trim()) {
            error 'BACKEND_DOCKERTAG must not be empty'
          }
          echo "Deploying tag: ${params.BACKEND_DOCKERTAG}"
        }
      }
    }

    stage('Verify Tools') {
      steps {
        sh '''
          echo "[INFO] Verifying required tools..."
          
          echo "‚úÖ kind version: $(kind version)"
          echo "‚úÖ kubectl version: $(kubectl version --client )"
          echo "‚úÖ docker version: $(docker --version)"
          
          echo "[INFO] All tools verified and ready!"
        '''
      }
    }

    stage('Create Kind Cluster') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Cleaning up any existing cluster..."
          kind delete cluster --name="$CLUSTER_NAME" 2>/dev/null || echo "No existing cluster to delete"
          
          echo "[INFO] Creating fresh Kind cluster: $CLUSTER_NAME"
          kind create cluster --name="$CLUSTER_NAME" --wait=90s
          
          echo "‚úÖ Cluster created successfully!"
          kubectl cluster-info --context kind-$CLUSTER_NAME
        '''
      }
    }

    stage('Patch Image Tags in Manifests') {
      steps {
        sh '''
          set -e
          echo "[INFO] Updating deployment image tags to :${BACKEND_DOCKERTAG}"
          sed -i "s|image: roshan03ish/auth:.*|image: roshan03ish/auth:${BACKEND_DOCKERTAG}|" k8s/auth/deployment.yml
          sed -i "s|image: roshan03ish/product:.*|image: roshan03ish/product:${BACKEND_DOCKERTAG}|" k8s/product/deployment.yml
          sed -i "s|image: roshan03ish/order:.*|image: roshan03ish/order:${BACKEND_DOCKERTAG}|" k8s/order/deployment.yml
          sed -i "s|image: roshan03ish/api-gateway:.*|image: roshan03ish/api-gateway:${BACKEND_DOCKERTAG}|" k8s/api-gateway/deployment.yml
          echo "[INFO] Resulting image references:"
          grep -R "image: roshan03ish" k8s || true
        '''
      }
    }

    stage('Apply Kubernetes Manifests') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Creating namespace..."
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create namespace "$NAMESPACE"
          echo "‚úÖ Namespace $NAMESPACE ready"

          echo "[INFO] Applying manifests..."
          kubectl apply -n "$NAMESPACE" -f k8s/db
          kubectl apply -n "$NAMESPACE" -f k8s/auth
          kubectl apply -n "$NAMESPACE" -f k8s/product
          kubectl apply -n "$NAMESPACE" -f k8s/order
          kubectl apply -n "$NAMESPACE" -f k8s/api-gateway

          echo "‚úÖ All manifests applied"
        '''
      }
    }

    stage('Wait for Pods') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Waiting for deployments..."
          for app in auth product order api-gateway; do
            echo "‚è≥ Waiting for $app..."
            kubectl rollout status deployment/$app -n "$NAMESPACE" --timeout=120s
          done
          
          echo "‚úÖ All deployments ready"
          kubectl get pods -n "$NAMESPACE" -o wide
        '''
      }
    }

    stage('Service Check') {
      steps {
        sh '''
          set -e
          
          echo "[INFO] Checking services..."
          kubectl get svc -n "$NAMESPACE"
          
          echo "[INFO] Testing api-gateway..."
          kubectl port-forward -n "$NAMESPACE" svc/api-gateway 8080:3003 >/dev/null 2>&1 &
          PF_PID=$!
          sleep 8
          
          if curl -fsS --max-time 5 http://127.0.0.1:8080/health >/dev/null 2>&1; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è Health endpoint not available"
          fi
          
          kill $PF_PID 2>/dev/null || true
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ CD pipeline completed successfully for tag ${params.BACKEND_DOCKERTAG}."
    }
    failure {
      echo "‚ùå CD pipeline failed for tag ${params.BACKEND_DOCKERTAG}." 
      script {
        sh '''
          set +e
          echo "[FAILURE] Gathering diagnostics..."
          kubectl get all -n "$NAMESPACE" || true
          kubectl describe pods -n "$NAMESPACE" || true
          kubectl get events -n "$NAMESPACE" --sort-by=.lastTimestamp | tail -n 20 || true

          echo "[CLEANUP] Cleaning up resources..."
          kubectl delete namespace "$NAMESPACE" --wait=false || true
          kind delete cluster --name "$CLUSTER_NAME" || true
          echo "‚úÖ Cleanup completed"
        '''
      }
    }
    always {
      echo 'üèÅ Pipeline finished.'
    }
  }
}